#!/usr/bin/env node

import { execSync } from "child_process";
import path from "path";
import Discord from "discord.js";
import fs from "fs-extra";
import prompts, { Answers, PromptObject } from "prompts";
import validatePackageName from "validate-npm-package-name";

const appDirectory: string = path.join(__dirname, "../app");
const appPackage = require(path.resolve(
  path.join(appDirectory, "package.json")
));

const utilityPackage = require(path.join(__dirname, "../package.json"));
const utilityNameAndVersion: string = `${utilityPackage.name} v${utilityPackage.version}`;

const fileDirectlyRun: boolean = require.main === module;

const [, , ...args] = process.argv;

interface AppSteps {
  message: string;
  action: Function;
}
interface AppStatus {
  status: "created" | "updated" | "error" | undefined;
}

export default class App {
  name: string;
  token: string;
  directory: string;
  questions: PromptObject[];
  updateQuestion: PromptObject[];
  updateSteps: AppSteps[];
  cleanInstallSteps: AppSteps[];
  isDryRun: boolean;
  appStatus: AppStatus;

  constructor(name?: string, token?: string) {
    this.name = name || appPackage.name;
    this.token = token || "DISCORD_BOT_TOKEN_PLACEHOLDER";
    this.directory = path.resolve(this.name);
    this.questions = [
      {
        type: "text",
        name: "name",
        initial: appPackage.name,
        validate: (name: string) => {
          const { validForNewPackages, errors, warnings } = validatePackageName(
            name
          );

          return (
            // @ts-expect-error
            validForNewPackages || `Error: ${(errors || warnings).join(", ")}.`
          );
        },
        message: "Application name?",
      },
      {
        type: "password",
        name: "token",
        initial: "DISCORD_BOT_TOKEN_PLACEHOLDER",
        message: "Discord bot token?",
      },
    ];
    this.updateQuestion = [
      {
        type: "confirm",
        name: "update",
        message: `Directory '${this.directory}' already exists. Do you want to update it?`,
      },
    ];
    this.updateSteps = [
      {
        message: `Updating core files in '${this.name}'...`,
        action: () => {
          fs.copySync(`${appDirectory}/src/core`, `${this.directory}/src/core`);
          fs.copySync(
            `${appDirectory}/src/index.js`,
            `${this.directory}/src/index.js`
          );
        },
      },
    ];
    this.cleanInstallSteps = [
      {
        message: `Creating directory '${this.name}'...`,
        action: () => fs.mkdirSync(this.directory),
      },
      {
        message: "Creating boilerplate...",
        action: () => {
          fs.copySync(appDirectory, this.directory);
          const gitIgnore = "node_modules/\ntoken.json\n";
          fs.writeFileSync(path.join(this.directory, ".gitignore"), gitIgnore);
        },
      },
      {
        message: "Updating package.json...",
        action: () => {
          const description = `Generated by ${utilityNameAndVersion}.`;
          const newPackage = { ...appPackage, name: this.name, description };
          fs.writeFileSync(
            path.join(this.directory, "package.json"),
            `${JSON.stringify(newPackage, null, 2)}\n`
          );
        },
      },
      {
        message: "Writing token.json...",
        action: () => {
          const newToken = { token: this.token };
          fs.writeFileSync(
            path.join(this.directory, "token.json"),
            `${JSON.stringify(newToken, null, 2)}\n`
          );
        },
      },
      {
        message: "Installing modules...",
        action: () => {
          process.chdir(this.directory);
          execSync("npm i --loglevel=error");
        },
      },
    ];
    this.isDryRun = args[0] === "--dry-run";
    this.appStatus = { status: undefined };
  }

  async build() {
    try {
      console.log(
        `This utility will walk you through creating a ${utilityPackage.name} application.\n\nPress ENTER to use the default.\nPress ^C at any time to quit.\n\n${utilityNameAndVersion}\n`
      );

      if (fileDirectlyRun) {
        const promptAnswers: Answers<string> = await prompts(this.questions);

        if (Object.entries(promptAnswers).length < 2) {
          console.log("\nQuitting...\n");
          process.exit(0);
        }

        this.name = promptAnswers.name;
        this.token = promptAnswers.token;

        console.log();
      }

      const isUpdate: boolean = this.verifyCreation();
      if (isUpdate) return await this.update();

      this.cleanInstallSteps.forEach(({ message, action }) => {
        console.log(message);
        if (!this.isDryRun) {
          action();
        }
      });

      if (!isUpdate) {
        console.log();
        console.log("Generating bot invite link...");
        const client = new Discord.Client();
        await client
          .login(this.token)
          .then(() =>
            console.log(
              `Invite your bot: https://discordapp.com/oauth2/authorize?scope=bot&client_id=${
                (client.user as Discord.ClientUser).id
              }`
            )
          )
          .catch(() =>
            console.warn(
              "Bot invite link was not generated due to the given bot token being invalid."
            )
          );
        console.log();
      }

      console.log(
        `Done!\n\nStart by running:\n\t$ cd ${this.name}/\n\t$ npm start`
      );

      this.appStatus = { status: "created" };
      return this.appStatus;
    } catch (e) {
      console.log("Error!\n");
      console.error(e);
      console.log();
      this.appStatus = { status: "error" };
      return this.appStatus;
    }
  }

  async update() {
    try {
      if (fileDirectlyRun) {
        const updatePromptAnswer = await prompts(this.updateQuestion);
        console.log();

        if (!updatePromptAnswer.update) {
          console.log("\nQuitting...\n");
          process.exit(0);
        }
      }

      this.updateSteps.forEach(({ message, action }) => {
        console.log(message);
        if (!this.isDryRun) {
          action();
        }
      });

      console.log(
        `Done!\n\nStart by running:\n\t$ cd ${this.name}/\n\t$ npm start`
      );

      this.appStatus = { status: "updated" };
      return this.appStatus;
    } catch (e) {
      console.log("Error!\n");
      console.error(e);
      console.log();

      this.appStatus = { status: "error" };
      return this.appStatus;
    }
  }

  verifyCreation() {
    return fs.existsSync(this.directory);
  }
}

if (fileDirectlyRun) new App().build();
